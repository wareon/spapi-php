<?php
/**
* This class is autogenerated by the Spapi class generator
* Date of generation: 2020-12-22
* Specification: ttps://github.com/amzn/selling-partner-api-models/blob/main/models/fulfillment-outbound-api-model/fulfillmentOutbound_2020-07-01.json
* Source MD5 signature: 548ed8d1e4a15e02891912990473c664
*
*
* Selling Partner APIs for Fulfillment Outbound
* The Selling Partner API for Fulfillment Outbound lets you create applications that help a seller fulfill Multi-Channel Fulfillment orders using their inventory in Amazon's fulfillment network. You can get information on both potential and existing fulfillment orders.
*/
namespace DoubleBreak\Spapi\Api;
use DoubleBreak\Spapi\Client;

class FulfillmentOutbound extends Client {

  /**
  * Operation getFulfillmentPreview
   * @param $version
   * @return mixed
  */
  public function getFulfillmentPreview($body = [], $version = '2020-07-01')
  {
    return $this->send("/fba/outbound/{$version}/fulfillmentOrders/preview", [
      'method' => 'POST',
      'json' => $body
    ]);
  }

  /**
  * Operation listAllFulfillmentOrders
  *
  * @param array $queryParams
  *    - *queryStartDate* string - A date used to select fulfillment orders that were last updated after (or at) a specified time. An update is defined as any change in fulfillment order status, including the creation of a new fulfillment order.
  *    - *nextToken* string - A string token returned in the response to your previous request.
   * @param $version
   * @return mixed
  */
  public function listAllFulfillmentOrders($queryParams = [], $version = '2020-07-01')
  {
    return $this->send("/fba/outbound/{$version}/fulfillmentOrders", [
      'method' => 'GET',
      'query' => $queryParams,
    ]);
  }

  /**
  * Operation createFulfillmentOrder
   * @param $version
   * @return mixed
  */
  public function createFulfillmentOrder($body = [], $version = '2020-07-01')
  {
    return $this->send("/fba/outbound/{$version}/fulfillmentOrders", [
      'method' => 'POST',
      'json' => $body
    ]);
  }

  /**
  * Operation getPackageTrackingDetails
  *
  * @param array $queryParams
  *    - *packageNumber* integer - The unencrypted package identifier returned by the getFulfillmentOrder operation.
   * @param $version
   * @return mixed
  */
  public function getPackageTrackingDetails($queryParams = [], $version = '2020-07-01')
  {
    return $this->send("/fba/outbound/{$version}/tracking", [
      'method' => 'GET',
      'query' => $queryParams,
    ]);
  }

  /**
  * Operation listReturnReasonCodes
  *
  * @param array $queryParams
  *    - *sellerSku* string - The seller SKU for which return reason codes are required.
  *    - *marketplaceId* string - The marketplace for which the seller wants return reason codes.
  *    - *sellerFulfillmentOrderId* string - The identifier assigned to the item by the seller when the fulfillment order was created. The service uses this value to determine the marketplace for which the seller wants return reason codes.
  *    - *language* string - The language that the TranslatedDescription property of the ReasonCodeDetails response object should be translated into.
   * @param $version
   * @return mixed
  */
  public function listReturnReasonCodes($queryParams = [], $version = '2020-07-01')
  {
    return $this->send("/fba/outbound/{$version}/returnReasonCodes", [
      'method' => 'GET',
      'query' => $queryParams,
    ]);
  }

  /**
  * Operation createFulfillmentReturn
  *
  * @param string $sellerFulfillmentOrderId An identifier assigned by the seller to the fulfillment order at the time it was created. The seller uses their own records to find the correct SellerFulfillmentOrderId value based on the buyer's request to return items.
   * @param $version
   * @return mixed
  */
  public function createFulfillmentReturn($sellerFulfillmentOrderId, $body = [], $version = '2020-07-01')
  {
    return $this->send("/fba/outbound/{$version}/fulfillmentOrders/{$sellerFulfillmentOrderId}/return", [
      'method' => 'PUT',
      'json' => $body
    ]);
  }

  /**
  * Operation getFulfillmentOrder
  *
  * @param string $sellerFulfillmentOrderId The identifier assigned to the item by the seller when the fulfillment order was created.
   * @param $version
   * @return mixed
  */
  public function getFulfillmentOrder($sellerFulfillmentOrderId, $version = '2020-07-01')
  {
    return $this->send("/fba/outbound/{$version}/fulfillmentOrders/{$sellerFulfillmentOrderId}", [
      'method' => 'GET',
    ]);
  }

  /**
  * Operation updateFulfillmentOrder
  *
  * @param string $sellerFulfillmentOrderId The identifier assigned to the item by the seller when the fulfillment order was created.
   * @param $version
   * @return mixed
  */
  public function updateFulfillmentOrder($sellerFulfillmentOrderId, $body = [], $version = '2020-07-01')
  {
    return $this->send("/fba/outbound/{$version}/fulfillmentOrders/{$sellerFulfillmentOrderId}", [
      'method' => 'PUT',
      'json' => $body
    ]);
  }

  /**
  * Operation cancelFulfillmentOrder
  *
  * @param string $sellerFulfillmentOrderId The identifier assigned to the item by the seller when the fulfillment order was created.
   * @param $version
   * @return mixed
  */
  public function cancelFulfillmentOrder($sellerFulfillmentOrderId, $version = '2020-07-01')
  {
    return $this->send("/fba/outbound/{$version}/fulfillmentOrders/{$sellerFulfillmentOrderId}/cancel", [
      'method' => 'PUT',
    ]);
  }

  /**
  * Operation getFeatures
  *
  * @param array $queryParams
  *    - *marketplaceId* string - The marketplace for which to return the list of features.
   * @param $version
   * @return mixed
  */
  public function getFeatures($queryParams = [], $version = '2020-07-01')
  {
    return $this->send("/fba/outbound/{$version}/features", [
      'method' => 'GET',
      'query' => $queryParams,
    ]);
  }

  /**
  * Operation getFeatureInventory
  *
  * @param string $featureName The name of the feature for which to return a list of eligible inventory.
  *
  * @param array $queryParams
  *    - *marketplaceId* string - The marketplace for which to return a list of the inventory that is eligible for the specified feature.
  *    - *nextToken* string - A string token returned in the response to your previous request that is used to return the next response page. A value of null will return the first page.
   * @param $version
   * @return mixed
  */
  public function getFeatureInventory($featureName, $queryParams = [], $version = '2020-07-01')
  {
    return $this->send("/fba/outbound/{$version}/features/inventory/{$featureName}", [
      'method' => 'GET',
      'query' => $queryParams,
    ]);
  }

  /**
  * Operation getFeatureSKU
  *
  * @param string $featureName The name of the feature.
  * @param string $sellerSku Used to identify an item in the given marketplace. SellerSKU is qualified by the seller's SellerId, which is included with every operation that you submit.
  *
  * @param array $queryParams
  *    - *marketplaceId* string - The marketplace for which to return the count.
   * @param $version
   * @return mixed
  */
  public function getFeatureSKU($featureName, $sellerSku, $queryParams = [], $version = '2020-07-01')
  {
    return $this->send("/fba/outbound/{$version}/features/inventory/{$featureName}/{$sellerSku}", [
      'method' => 'GET',
      'query' => $queryParams,
    ]);
  }
}
